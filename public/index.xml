<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Mr.W&#39;s Blog</title>
    <link>http://localhost:1313/</link>
    <description>Recent content on Mr.W&#39;s Blog</description>
    <image>
      <title>Mr.W&#39;s Blog</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 01 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Hugo Warning [found no layout file for ..]</title>
      <link>http://localhost:1313/posts/hugowarn/</link>
      <pubDate>Mon, 01 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/hugowarn/</guid>
      <description>Warning message: WARN found no layout file for &amp;#34;html&amp;#34; for kind &amp;#34;home&amp;#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN found no layout file for &amp;#34;html&amp;#34; for kind &amp;#34;taxonomy&amp;#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination. WARN found no layout file for &amp;#34;html&amp;#34; for kind &amp;#34;section&amp;#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.</description>
    </item>
    <item>
      <title>AWS S3 Storage Class</title>
      <link>http://localhost:1313/posts/aws-s3-storage-class/</link>
      <pubDate>Mon, 08 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/aws-s3-storage-class/</guid>
      <description>Bucket Bucket Bucket
Standard Classes S3 Standard - General Purpose 99.99% avaliability Used for frequent accessed data Low latency and high throughput Usage: Big data analytics, mobile &amp;amp; gaming applications, content distribution&amp;hellip;
Standard - Infrequent Access For data that is less frequently accessed, but requires rapud acess when needed Lower cost than S3 standard Intelligent Tiering Moves objects automatically between Access Tiers based on usage Usage: Unknown or changing access</description>
    </item>
    <item>
      <title>AWS Typical 3 Tier Solution Architecture</title>
      <link>http://localhost:1313/posts/aws-3-tier-arch/</link>
      <pubDate>Sat, 06 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/aws-3-tier-arch/</guid>
      <description>The above picture shows the classic 3 tier solution architecture in AWS manner.This solution well solves problems such as disaster recovery, failover, load balancing, and network domain separation.
Below is the detailed description of tools using in the solution.
Route 53: Amazon Route 53 is a highly available and scalable Domain Name System (DNS) web service. It has health check abilitiy and failover solution. By using Route 53, you can fine-tune the DNS route with continuously high avaliablilty.</description>
    </item>
    <item>
      <title>Spring Boot Software Testing 6 - Static Analyzers</title>
      <link>http://localhost:1313/posts/springboottest6/</link>
      <pubDate>Thu, 04 Apr 2024 13:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/springboottest6/</guid>
      <description>Static Analyzers Static analysis tools are essential in software development, focusing on improving code quality, identifying bugs, and ensuring adherence to coding standards without executing the code. They serve multiple purposes:
Code Quality: Enhance code readability, maintainability, and efficiency.
Bug Detection: Identify and fix errors early in the development process.
Security: Detect potential security vulnerabilities.
Performance: Highlight inefficient code patterns for optimization. These tools are used throughout the development lifecycle, particularly in:</description>
    </item>
    <item>
      <title>Spring Boot Software Testing 5 - Testable Design and Mocking</title>
      <link>http://localhost:1313/posts/springboottest5/</link>
      <pubDate>Thu, 04 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/springboottest5/</guid>
      <description>Testable Design and Mocking What is testable design, and what kinds of design in java are testable?
In Java, achieving a testable design is about adhering to principles and practices that minimize coupling, maximize cohesion, and facilitate isolation of components for testing. It involves strategic use of design patterns, architectural decisions that favor testability, and leveraging tools and frameworks that support automated testing. This approach not only makes your code more testable but also improves its overall design and maintainability.</description>
    </item>
    <item>
      <title>Spring Boot Software Testing 4 - Continuous Integration</title>
      <link>http://localhost:1313/posts/springboottest4/</link>
      <pubDate>Mon, 01 Apr 2024 13:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/springboottest4/</guid>
      <description>Continuous Integration Continuous Integration (CI) is a software development practice where developers frequently merge their code changes into a central repository, preferably multiple times a day. Each merge triggers an automated build and testing process, which helps in identifying and addressing integration errors as quickly as possible. The primary purpose of CI is to improve software quality and accelerate the development process.
Key aspects of Continuous Integration include:
Automated Building and Testing: Automated tools are used to compile the code and run tests every time changes are integrated.</description>
    </item>
    <item>
      <title>Spring Boot Software Testing 3 - White Box Testing and Coverage</title>
      <link>http://localhost:1313/posts/springboottest3/</link>
      <pubDate>Mon, 01 Apr 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/springboottest3/</guid>
      <description>White Box Testing and Coverage Structural testing, often referred to as white-box testing, is a rigorous methodology for evaluating the internal workings of a software application. This technique delves into the application&amp;rsquo;s source code, architecture, and design, offering a detailed view of its internal pathways. Unlike black-box testing, which assesses the software&amp;rsquo;s external functionality without regard to its internal mechanisms, structural testing demands an intimate understanding of the codebase. This approach allows testers to meticulously examine execution paths, logic flows, and the outcomes of various code segments.</description>
    </item>
    <item>
      <title>Spring Boot Software Testing 2 - Actuator - Finite State Machine</title>
      <link>http://localhost:1313/posts/springboottest2/</link>
      <pubDate>Sun, 31 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/springboottest2/</guid>
      <description>Finite State machine Finite models are essential in testing for simplifying complex systems, allowing exhaustive testing, and facilitating automated test case generation. They offer a clear way to represent systems as finite state machines, making it possible to explore all possible states and transitions. This approach is critical for ensuring systems behave as expected under every scenario, especially in critical applications where failure is unacceptable.
Key benefits include:
Simplification: Reducing complex systems to manageable models.</description>
    </item>
    <item>
      <title>Spring Boot Software Testing 1, Partitioning and Functioning testing</title>
      <link>http://localhost:1313/posts/springboottest1/</link>
      <pubDate>Sat, 30 Mar 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/springboottest1/</guid>
      <description>Spring Boot is a project under the Spring Framework that simplifies developing, configuring, and deploying Spring-based applications. It promotes convention over configuration by offering pre-configured setups and auto-configuration based on project dependencies, eliminating much of the manual setup and configuration work. Spring Boot applications are stand-alone, containing an embedded web server for easy deployment as a single executable JAR. It offers opinionated defaults to reduce development effort, while still allowing for customization.</description>
    </item>
    <item>
      <title>Size measurement parameters -- client, offset and scroll</title>
      <link>http://localhost:1313/posts/scroll-offset-client/</link>
      <pubDate>Mon, 08 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/scroll-offset-client/</guid>
      <description>Prerequisite: You need to familiar with the box model
Understanding the differences between clientHeight/clientLeft, offsetHeight/offsetLeft, and scrollTop/scrollLeft in the context of the Document Object Model (DOM) is crucial for effective web design and development. These properties are used to measure different aspects of elements&amp;rsquo; size and position in relation to their content, padding, border, and scroll position.
Client clientHeight and clientLeft will give you the height and width of an element including padding.</description>
    </item>
    <item>
      <title>Scroll Event</title>
      <link>http://localhost:1313/posts/scroll-event/</link>
      <pubDate>Sun, 07 Jan 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/scroll-event/</guid>
      <description>The scroll event in JavaScript is an important event that is triggered whenever an element or the window is scrolled. This event is particularly useful for creating dynamic effects based on the scroll position, such as parallax animations, infinite scrolling, or showing/hiding navigation bars. Here&amp;rsquo;s an overview of the scroll event:
1. How it Works: The scroll event fires when the document view or an element has been scrolled. It applies to any scrollable element, including the window.</description>
    </item>
    <item>
      <title>Event flow , capture, bubble and how to stop bubbling</title>
      <link>http://localhost:1313/posts/event-flow-capture-bubble/</link>
      <pubDate>Sat, 30 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/event-flow-capture-bubble/</guid>
      <description>Event Bubbling in JavaScript Event capturing is an event handling mechanism in JavaScript, contrasting with event bubbling. During the capturing phase, an event starts at the root node (usually the document object) and propagates down the DOM tree to the target element, where the event actually took place.
The process of event capturing is as follows:
Capturing Phase: When an event occurs, it is first captured at the topmost node of the DOM tree, then propagates downwards, level by level, until it reaches the target element.</description>
    </item>
    <item>
      <title>Timer</title>
      <link>http://localhost:1313/posts/timer/</link>
      <pubDate>Tue, 26 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/timer/</guid>
      <description>Javascript timer function can make some code be excueted repeatedly over time.
Syntax:
// open setInterval(function,interaval-time) // close let t = setInterval(function,interaval-time) clearInterval(t) t: variable
interaval-time unit: ms
Example:
&amp;lt;body&amp;gt; &amp;lt;button class=&amp;#34;btn&amp;#34; disabled&amp;gt;aggree(5)&amp;lt;/button&amp;gt; &amp;lt;script&amp;gt; const btn = document.querySelector(&amp;#39;.btn&amp;#39;) let i = 5 let timer = setInterval(function(){ i-- btn.innerHTML = `aggree(${i})` if (i === 0){ clearInterval(timer) btn.disabled = false btn.innerHTML = &amp;#39;aggree&amp;#39; } },1000) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; </description>
    </item>
    <item>
      <title>Control CSS using classList</title>
      <link>http://localhost:1313/posts/operate-style/</link>
      <pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/operate-style/</guid>
      <description>ClassList can help reduce the redundancy of .style method and resolve the ClassName overwrite risk.
Sytax:
// add a class element.classList.add(&amp;#39;className&amp;#39;) // delete a class element.classList.remove(&amp;#39;className&amp;#39;) // switch a class element.classList.toggle(&amp;#39;className&amp;#39;) Example:
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;Document&amp;lt;/title&amp;gt; &amp;lt;style&amp;gt; .box { width: 200px; height: 200px; color: #333; } .active { color: red; background-color: pink; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt;text&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; //get element const box = document.</description>
    </item>
    <item>
      <title>DOM -- Document Object Model</title>
      <link>http://localhost:1313/posts/dom/</link>
      <pubDate>Mon, 25 Dec 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/dom/</guid>
      <description>DOM query Slect first match element document.querySelector(&amp;#39;css selector&amp;#39;) Slect all match element document.querySelectorAll(&amp;#39;css selector&amp;#39;) return is fake array which no work with push and pop method
Modification using DOM modify text content &amp;lt;body&amp;gt; &amp;lt;div class=&amp;#34;box&amp;#34;&amp;gt;content&amp;lt;/div&amp;gt; &amp;lt;script&amp;gt; const box = document.querySelector(&amp;#39;.box&amp;#39;) box.innerText = &amp;#39;content changed&amp;#39; box.innerHTML = &amp;#39;&amp;lt;strong&amp;gt;content changed&amp;lt;/strong&amp;gt;&amp;#39; &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; innerText method will not parse tags, exp: &amp;lt;strong&amp;gt;hello&amp;lt;/strong&amp;gt; will return &amp;lt;strong&amp;gt;hello&amp;lt;/strong&amp;gt; rather hello</description>
    </item>
    <item>
      <title>Git classic workflow and merge conflict solution</title>
      <link>http://localhost:1313/posts/git-workflow-conflict/</link>
      <pubDate>Fri, 17 Nov 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/git-workflow-conflict/</guid>
      <description>Mearge conflict resolution: Edit the confilct file manually and then commit to branch</description>
    </item>
    <item>
      <title>How to enter QNAP NAS Mega CMD</title>
      <link>http://localhost:1313/posts/megacmd/</link>
      <pubDate>Sat, 11 Mar 2023 23:19:05 +0000</pubDate>
      <guid>http://localhost:1313/posts/megacmd/</guid>
      <description>Mega CMD is an software that provide similar function of QNAP HBS, but I don&amp;rsquo;t know why they can&amp;rsquo;t just integrated their function into HBS. And it is a command line system, though I&amp;rsquo;m not afraid of command but it truly increase the inconvenience for those who just want to make a backup. Most seriously, the way to enter the cmd window won&amp;rsquo;t show up on their readme.md but only in the introduction of the app store, with an very blurry picture.</description>
    </item>
    <item>
      <title>How to make QNAP NAS DDNS functional while using Tproxy</title>
      <link>http://localhost:1313/posts/qnap_ddns/</link>
      <pubDate>Wed, 08 Mar 2023 21:55:34 +0000</pubDate>
      <guid>http://localhost:1313/posts/qnap_ddns/</guid>
      <description>Prerequisite: Before proceeding, it is essential to have a static public IP. If you do not already have one, kindly reach out to your ISP for assistance. Please note that if you are unfamiliar with QNAP NAS, this article may not cater to your requirements.
For several reasons, you cannot connect to many cloud storage server like google drive in China, which make it difficult to fully function the HBS3(Hybrid Backup Sync).</description>
    </item>
    <item>
      <title>How Middleboxs Identify Proxy Traffics</title>
      <link>http://localhost:1313/posts/middle_box/</link>
      <pubDate>Sat, 22 Oct 2022 23:36:11 +0000</pubDate>
      <guid>http://localhost:1313/posts/middle_box/</guid>
      <description>Abstract There is no absolute safe disguise, all protocols have risks of detected.
Common attack made by middle box Passive analysis (Traffic characteristic, PoC vulnerability) Usually use for plain text protocol or TLS handshake.
Active analysis Usually use for Shadowsocks, V2Ray, TLS v1.3 (obtian svers&amp;rsquo;s SSL certificate)
replay package
Some obvious charecteristics of proxy traffic. Long connection Most HTTP traffic is short connection.
bidireaction flow 99% of Web traffic(HTTP) is one-way flow, which is a group of request match a group of response, few website use websocket.</description>
    </item>
    <item>
      <title>Nginx pid error fix</title>
      <link>http://localhost:1313/posts/nginx_error/</link>
      <pubDate>Fri, 21 Oct 2022 10:50:32 +0000</pubDate>
      <guid>http://localhost:1313/posts/nginx_error/</guid>
      <description>If you use systemctl status nginx to check nginx status you may find a pid error appear on status panel. The words that appear may be :
Can&amp;#39;t open PID file /run/nginx.pid (yet?) after start: Operation not permitted Or Can&amp;#39;t open PID file /var/run/nginx.pid (yet?) after start: No such file or directory This is becasue the pid file not generate before the nginx booted. The solution is to add following sentence into /usr/lib/systemd/system/nginx.</description>
    </item>
  </channel>
</rss>
