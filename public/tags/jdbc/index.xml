<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Jdbc on Mr.W&#39;s Blog</title>
    <link>http://localhost:1313/tags/jdbc/</link>
    <description>Recent content in Jdbc on Mr.W&#39;s Blog</description>
    <image>
      <title>Mr.W&#39;s Blog</title>
      <url>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</url>
      <link>http://localhost:1313/%3Clink%20or%20path%20of%20image%20for%20opengraph,%20twitter-cards%3E</link>
    </image>
    <generator>Hugo -- 0.140.2</generator>
    <language>en</language>
    <lastBuildDate>Sat, 13 Jul 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/tags/jdbc/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>SpringBoot JDBC Reverse Analysis</title>
      <link>http://localhost:1313/posts/springbootjdbc/</link>
      <pubDate>Sat, 13 Jul 2024 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/springbootjdbc/</guid>
      <description>&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;This is some of my thinking about the Spring framework&amp;rsquo;s JDBC from my reverse engineering course. The &lt;code&gt;location model&lt;/code&gt; image shows the abstract classes, implementation classes, interfaces, and methods that are directly or indirectly involved when executing the query method. The &lt;code&gt;workflow&lt;/code&gt; image depicts the detailed function call process after initiating the JDBC query method.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Due to space and time limitations, other branches resulting from polymorphism are not shown; only the chain produced by importing SQL of string type is displayed here.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
