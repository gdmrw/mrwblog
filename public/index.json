[{"content":"Finite State machine Finite models are essential in testing for simplifying complex systems, allowing exhaustive testing, and facilitating automated test case generation. They offer a clear way to represent systems as finite state machines, making it possible to explore all possible states and transitions. This approach is critical for ensuring systems behave as expected under every scenario, especially in critical applications where failure is unacceptable.\nKey benefits include:\nSimplification: Reducing complex systems to manageable models. Exhaustive Testing: Enabling complete coverage of all possible states and transitions. Automated Testing: Supporting the generation of test cases and regression testing. Formal Verification: Allowing mathematical proofs of system correctness through model checking and other formal methods. Finite models are widely used in software and hardware testing to improve test coverage, find potential issues, and ensure system reliability. However, challenges such as scalability and the accuracy of the models must be managed to ensure effective testing outcomes.\nSrping boot actuator Spring boot actuator is one of the most important component from spring boot.provides a set of ready-to-use features to help you monitor and manage your application. These features allow you to inspect the internal state of your application, such as health status, metrics, environment information, and more. This is especially useful for microservices architectures in production environments.\nThere are some endpoints from actuator:\n/actuator: The root endpoint that lists all available actuator endpoints. /health: Summarizes the health status of your application. /heapdump: Triggers a dump of the Java heap. /httptrace: Shows HTTP trace information (by default, the last 100 HTTP request-response exchanges). /info: Displays arbitrary application info. /loggers: Enables viewing and modifying the logging level of application loggers. /metrics: Shows ‘metrics’ information for the current application. /shutdown: Lets you gracefully shut down the application (disabled by default). /env: Exposes properties from Spring’s ConfigurableEnvironment. This is the function what actuator offers; I won’t explain the detailed functions here. The spring boot basic policy is: All the function except /health will be treated as sensitive data which will not open to the public until the auth passed.\nThe finite state machine without verification will be look like this:\nAll the actuator function except health will be received a http 302 redirect response. The health will be received http ok and show the data query.\nLet\u0026rsquo;s see how the finite state machine change when verification completed.\nNow, the server will make more response, not just including all the actuator services, but also the exception handling. like /foo will response http500. http 403 will pop up when make a GET request in prohibited port when CORS enable.\nBelow shows a bunch of screenshots about how it actually reacts:\nfirst the login page try to enter actuator/env and excute, page automatically fall back to login page try use actuator/health get the new return /actuator/env now functional after entering correct username and password try exception page, get http 500 try to get some page not existed, get http 404 login fail can also be a simple state machine, but it\u0026rsquo;s code implementation based on spring security, hence not within the scope of this discussion ","permalink":"https://examplesite.com/posts/springboottest2/","summary":"Finite State machine Finite models are essential in testing for simplifying complex systems, allowing exhaustive testing, and facilitating automated test case generation. They offer a clear way to represent systems as finite state machines, making it possible to explore all possible states and transitions. This approach is critical for ensuring systems behave as expected under every scenario, especially in critical applications where failure is unacceptable.\nKey benefits include:\nSimplification: Reducing complex systems to manageable models.","title":"Spring Boot Software testing 2 - Actuator - Finite State Machine"},{"content":"Spring Boot is a project under the Spring Framework that simplifies developing, configuring, and deploying Spring-based applications. It promotes convention over configuration by offering pre-configured setups and auto-configuration based on project dependencies, eliminating much of the manual setup and configuration work. Spring Boot applications are stand-alone, containing an embedded web server for easy deployment as a single executable JAR. It offers opinionated defaults to reduce development effort, while still allowing for customization. Features like Actuator provide built-in endpoints for application monitoring and management. Primarily written in Java, Spring Boot supports other JVM languages like Kotlin and Groovy, making it versatile for various enterprise applications. Its goal is to enable quick application startup with less code and configuration hassle.\nSpring is popular for its numerous advantages: It promotes testable code through its dependency injection method. Offers robust yet user-friendly database transaction management. Facilitates seamless integration with other Java frameworks such as JPA/Hibernate ORM and web frameworks like Struts/JSF. Provides a cutting-edge Web MVC framework for developing web applications. Spring boot size of LOC By using\nfind . -name \u0026#39;*.java\u0026#39; | xargs wc -l You can easily find the specific LOC of Spring boot project The result is 257187 total, I also find some data come from internet about the spring boot LOC in 2020, which you can check below.\nspring-boot-test : 13608 spring-boot-starters : 0 spring-boot-autoconfigure : 69450 spring-boot-docs : 1131 spring-boot-properties-migrator : 548 spring-boot-tools : 33627 spring-boot-cli : 10278 spring-boot-dependencies : 0 spring-boot-test-autoconfigure : 8439 spring-boot-actuator-autoconfigure : 26997 spring-boot-actuator : 27745 spring-boot-parent : 0 spring-boot-devtools : 10912 spring-boot : 61107 Total size of LOC：263842 Testing Spring Boot provides a comprehensive suite of components to facilitate testing for applications built with it. These components simplify the process of writing and executing tests by providing auto-configuration, utility classes, and annotations. Here\u0026rsquo;s an overview of some of the key testing components and features offered by Spring Boot:\n@SpringBootTest: This annotation is used for integration testing in Spring Boot applications. It loads the complete application context and is useful for testing the interaction between all parts of the application.\n@DataJpaTest: Specifically designed for testing JPA repositories, this annotation configures an in-memory database, scans for @Entity classes, and configures Spring Data JPA repositories. It\u0026rsquo;s ideal for data access layer testing.\n@WebMvcTest: It is used for testing MVC controllers without starting a full HTTP server. It auto-configures MockMvc for easy testing of controller endpoints.\n@WebFluxTest: Similar to @WebMvcTest, but for applications using Spring WebFlux. It helps in testing annotated controllers in a non-blocking way.\n@RestClientTest: This annotation is useful for testing REST clients. It auto-configures MockRestServiceServer to mock remote REST services.\n@MockBean and @SpyBean: Spring Boot provides these annotations for adding Mockito mocks or spies into the Spring application context. They can be used to replace or spy on beans in the context for unit testing.\nTestRestTemplate and WebTestClient: For integration testing, Spring Boot offers TestRestTemplate for RESTful communication and WebTestClient for testing reactive web applications, making it easier to test web layers.\nJsonPath and XmlPath: For testing RESTful services, Spring Boot supports JsonPath and XmlPath to query and assert the JSON or XML response content.\nAuto-configured Test Databases: Spring Boot can automatically configure an in-memory database for tests, such as H2, which is very convenient for testing data access layers without the need for a real database.\n@TestConfiguration: This annotation helps to define additional beans or customizations for the test context. It allows overriding of certain parts of the application configuration only for tests.\nThese components, among others, provide a robust framework for both unit and integration testing in Spring Boot applications, ensuring that developers can write comprehensive tests with minimal boilerplate code.\nTest cases The spring boot project itself uses a large number of test cases to ensure that all components serve as expected. The following shows the directory structure under the spring boot test folder.\n. ├── spring-boot-integration-tests │ ├── spring-boot-configuration-processor-tests │ ├── spring-boot-launch-script-tests │ ├── spring-boot-loader-classic-tests │ ├── spring-boot-loader-tests │ └── spring-boot-server-tests └── spring-boot-smoke-tests ├── spring-boot-smoke-test-activemq ├── spring-boot-smoke-test-actuator ├── spring-boot-smoke-test-actuator-custom-security ├── spring-boot-smoke-test-actuator-log4j2 ├── spring-boot-smoke-test-actuator-noweb ├── spring-boot-smoke-test-actuator-ui ├── spring-boot-smoke-test-amqp ├── spring-boot-smoke-test-ant ├── spring-boot-smoke-test-aop ├── spring-boot-smoke-test-batch ├── spring-boot-smoke-test-bootstrap-registry ├── spring-boot-smoke-test-cache ├── spring-boot-smoke-test-data-cassandra ├── spring-boot-smoke-test-data-couchbase ├── spring-boot-smoke-test-data-jdbc ├── spring-boot-smoke-test-data-jpa ├── spring-boot-smoke-test-data-ldap ├── spring-boot-smoke-test-data-mongo ├── spring-boot-smoke-test-data-r2dbc ├── spring-boot-smoke-test-data-r2dbc-flyway ├── spring-boot-smoke-test-data-r2dbc-liquibase ├── spring-boot-smoke-test-data-redis ├── spring-boot-smoke-test-data-rest ├── spring-boot-smoke-test-devtools ├── spring-boot-smoke-test-flyway ├── spring-boot-smoke-test-graphql ├── spring-boot-smoke-test-hateoas ├── spring-boot-smoke-test-integration ├── spring-boot-smoke-test-jersey ├── spring-boot-smoke-test-jetty ├── spring-boot-smoke-test-jetty-jsp ├── spring-boot-smoke-test-jetty-ssl ├── spring-boot-smoke-test-jpa ├── spring-boot-smoke-test-junit-vintage ├── spring-boot-smoke-test-kafka ├── spring-boot-smoke-test-liquibase ├── spring-boot-smoke-test-logback ├── spring-boot-smoke-test-oauth2-authorization-server ├── spring-boot-smoke-test-oauth2-client ├── spring-boot-smoke-test-oauth2-resource-server ├── spring-boot-smoke-test-parent-context ├── spring-boot-smoke-test-profile ├── spring-boot-smoke-test-property-validation ├── spring-boot-smoke-test-pulsar ├── spring-boot-smoke-test-quartz ├── spring-boot-smoke-test-reactive-oauth2-client ├── spring-boot-smoke-test-reactive-oauth2-resource-server ├── spring-boot-smoke-test-rsocket ├── spring-boot-smoke-test-saml2-service-provider ├── spring-boot-smoke-test-secure ├── spring-boot-smoke-test-secure-jersey ├── spring-boot-smoke-test-secure-webflux ├── spring-boot-smoke-test-servlet ├── spring-boot-smoke-test-session-hazelcast ├── spring-boot-smoke-test-session-jdbc ├── spring-boot-smoke-test-session-mongo ├── spring-boot-smoke-test-session-redis ├── spring-boot-smoke-test-session-webflux-mongo ├── spring-boot-smoke-test-session-webflux-redis ├── spring-boot-smoke-test-simple ├── spring-boot-smoke-test-test ├── spring-boot-smoke-test-test-nomockito ├── spring-boot-smoke-test-testng ├── spring-boot-smoke-test-tomcat ├── spring-boot-smoke-test-tomcat-jsp ├── spring-boot-smoke-test-tomcat-multi-connectors ├── spring-boot-smoke-test-tomcat-ssl ├── spring-boot-smoke-test-traditional ├── spring-boot-smoke-test-undertow ├── spring-boot-smoke-test-undertow-ssl ├── spring-boot-smoke-test-war ├── spring-boot-smoke-test-web-application-type ├── spring-boot-smoke-test-web-freemarker ├── spring-boot-smoke-test-web-groovy-templates ├── spring-boot-smoke-test-web-jsp ├── spring-boot-smoke-test-web-method-security ├── spring-boot-smoke-test-web-mustache ├── spring-boot-smoke-test-web-secure ├── spring-boot-smoke-test-web-secure-custom ├── spring-boot-smoke-test-web-secure-jdbc ├── spring-boot-smoke-test-web-static ├── spring-boot-smoke-test-web-thymeleaf ├── spring-boot-smoke-test-webflux ├── spring-boot-smoke-test-webflux-coroutines ├── spring-boot-smoke-test-webservices ├── spring-boot-smoke-test-websocket-jetty ├── spring-boot-smoke-test-websocket-tomcat ├── spring-boot-smoke-test-websocket-undertow └── spring-boot-smoke-test-xml Smoke test is an industry testing specification. It is responsible for basic functional testing to ensure that basic functions and processes can work. If and only if the smoke test passes, more detailed tests such as functional testing, integration testing, system testing, etc. will begin, so the smoke test is a good entry point for testing. You can find that spring boot not only tests its own developed components such as actuator, but also conducts detailed tests on other inherited components.We can find some familiar figures in it， like kafka, redis, log4j2 etc.\nRunning the test case Spring boot uses gradle as its automated build tool. To test the entire project, you can simply run:\ngradle clean test Gradle will automatically compile the project and test all existing and not ignored test cases.\nBut if you do that, you will find some funny things happen. You will find one error pop up in the terminal saying there is a failure when build, lets see what it said.\n\u0026gt; Task :spring-boot-project:spring-boot-tools:spring-boot-gradle-plugin:compileTestJava /Users/wjx/Documents/winter quarter/SWE261P/spring test/spring-boot/spring-boot-project/spring-boot-tools/spring-boot-gradle-plugin/src/test/java/org/springframework/boot/gradle/tasks/buildinfo/BuildInfoTests.java:179: error: method loadGradlePropertiesFrom in interface GradlePropertiesController cannot be applied to given types; .loadGradlePropertiesFrom(projectDir); ^ required: File,boolean found: File reason: actual and formal argument lists differ in length 1 error \u0026gt; Task :spring-boot-project:spring-boot-tools:spring-boot-gradle-plugin:compileTestJava FAILED I first double-check to make sure that\u0026rsquo;s not due to my mistake, I clone the repo again and run the test agian, and the error still exists.\nAccording to the error info, it seems like the method expected to receive 2 params but only get 1, but after I look into the compile test, I found that the design looks correct.\nThe abstract method loadGradlePropertiesFrom is design to input 1 param, and the IDE doesn\u0026rsquo;t pop up any error. I don\u0026rsquo;t know why Gradle said expected 2, but it may be some of the Gradle issue since it\u0026rsquo;d belong to their library.\nBut sometimes you may not want to test the huge system, in most cases, you just want to check the specific function you test. The whole system build obviously not suitable for that—it\u0026rsquo;s too slow and you need to spend a lot of time just waiting for the result. In this case, I prefer to use the test interface inside the IDE to call the specified test file individually. It will give you greater convenience and help with positioning problems.\nPartitioning and Functioning testing Systematic functional testing and partition testing are crucial for ensuring that a software application is reliable, functions as expected, and meets the users\u0026rsquo; needs. They are fundamental components of a thorough and effective software testing strategy.\nIn Functional testing, also known as black box testing, the tester evaluates the software by testing its functions according to the requirements, without any knowledge of the internal workings, structure, or implementation of the application. The focus is on what the system does, not how it does it.\nPartitioning testing, also known as equivalence partitioning, is a technique used in software testing to enhance efficiency and effectiveness by reducing the number of test cases needed to cover all possible input scenarios.\nI found my target test case at:\nspring-boot-tests/spring-boot-smoke-tests/spring-boot-smoke-test-actuator/src/test/java/smoketest/actuator/CorsSampleActuatorApplicationTests.java Let\u0026rsquo;s check around the existing test case first:\npackage smoketest.actuator; import java.net.URI; import java.util.Map; import org.junit.jupiter.api.BeforeEach; import org.junit.jupiter.api.DisplayName; import org.junit.jupiter.api.Test; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.boot.test.context.SpringBootTest; import org.springframework.boot.test.web.client.LocalHostUriTemplateHandler; import org.springframework.boot.test.web.client.TestRestTemplate; import org.springframework.boot.web.client.RestTemplateBuilder; import org.springframework.context.ApplicationContext; import org.springframework.http.HttpStatus; import org.springframework.http.RequestEntity; import org.springframework.http.ResponseEntity; import org.springframework.test.context.ActiveProfiles; import static org.assertj.core.api.Assertions.assertThat; /** * Integration test for cors preflight requests to management endpoints. * * @author Madhura Bhave */ @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) @ActiveProfiles(\u0026#34;cors\u0026#34;) class CorsSampleActuatorApplicationTests { private TestRestTemplate testRestTemplate; @Autowired private ApplicationContext applicationContext; @BeforeEach void setUp() { RestTemplateBuilder builder = new RestTemplateBuilder(); LocalHostUriTemplateHandler handler = new LocalHostUriTemplateHandler(this.applicationContext.getEnvironment(), \u0026#34;http\u0026#34;); builder = builder.uriTemplateHandler(handler); this.testRestTemplate = new TestRestTemplate(builder); } @Test void endpointShouldReturnUnauthorized() { ResponseEntity\u0026lt;?\u0026gt; entity = this.testRestTemplate.getForEntity(\u0026#34;/actuator/env\u0026#34;, Map.class); assertThat(entity.getStatusCode()).isEqualTo(HttpStatus.UNAUTHORIZED); } @Test void preflightRequestToEndpointShouldReturnOk() throws Exception { RequestEntity\u0026lt;?\u0026gt; healthRequest = RequestEntity.options(new URI(\u0026#34;/actuator/env\u0026#34;)) .header(\u0026#34;Origin\u0026#34;, \u0026#34;http://localhost:8080\u0026#34;) .header(\u0026#34;Access-Control-Request-Method\u0026#34;, \u0026#34;GET\u0026#34;) .build(); ResponseEntity\u0026lt;?\u0026gt; exchange = this.testRestTemplate.exchange(healthRequest, Map.class); assertThat(exchange.getStatusCode()).isEqualTo(HttpStatus.OK); } @Test void preflightRequestWhenCorsConfigInvalidShouldReturnForbidden() throws Exception { RequestEntity\u0026lt;?\u0026gt; entity = RequestEntity.options(new URI(\u0026#34;/actuator/env\u0026#34;)) .header(\u0026#34;Origin\u0026#34;, \u0026#34;http://localhost:9095\u0026#34;) .header(\u0026#34;Access-Control-Request-Method\u0026#34;, \u0026#34;GET\u0026#34;) .build(); ResponseEntity\u0026lt;byte[]\u0026gt; exchange = this.testRestTemplate.exchange(entity, byte[].class); assertThat(exchange.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN); } } The file name told us what this test case doing, the author want to make some test about the spring boot self-build tool, the actuator.\nSpring Boot Actuator provides developers with powerful capabilities to monitor and manage applications. It is one of the indispensable tools for Spring Boot applications in the production environment. And this testing is specifically for testing the actuator endpoint.\nOverall, this java test cross-origin resource sharing (CORS) preflight requests specifically for testing management endpoints (Actuator endpoints). In other words, the main goal is to verify the behavior of the CORS policy on the application\u0026rsquo;s management endpoint.\nBecause Actuator endpoints can expose sensitive information, it is important to manage the security of these endpoints. In a production environment, it is recommended to restrict access to these endpoints, such as only allowing access from specific IP addresses, or adding authentication through Spring Security.\nYou can see that author use @ActiveProfiles(\u0026quot;cors\u0026quot;) to make an Simple restrictions on the accessible scope.\nChecking the application-cors.properties file we found that there is two line of rule in the file. They are:\nmanagement.endpoints.web.cors.allowed-origins=http://localhost:8080 management.endpoints.web.cors.allowed-methods=GET Simple and easy to understand, server will only respond to the get request send through http://localhost:8080 others will be forbidden.\nAnd the author tests exactly based on what limitation they set.\nTo simplify, in 3 cases, the author did 3 things.\nTry to get the sensitive end point without any authorization, and expected to get 401 unauthorized response. Try to get the OK response with corret configuration Try to get the forbidden response with incorrect configuration The author leverages two key parameters for enabling the test function: the RESTful API and the port. Both serve as excellent parameters for partitioning. However, for a clearer delineation, the HTTP port is selected as the primary parameter for partition testing.\nIn the realm of computer networking, a port functions as a virtual point where network connections are initiated and terminated. Operating on a software level, ports enable multiple services or applications to listen for and transmit network requests using the same IP address.\nGiven that each port is uniquely identified by its number, within a range from 0 to 65535, this facilitates the creation of boundary-based test cases.\nThis specific range allows for the straightforward determination of the minimum and maximum port boundaries, which are 0 and 65535, respectively. Utilizing this information, one can devise a test case to ascertain whether the endpoint\u0026rsquo;s limit policy is adept at managing boundary events.\nAdditionally, a test case has been crafted to evaluate how the endpoint policy copes with non-existent ports, thereby assessing its effectiveness in handling cases that fall outside the defined bounds.\nThe specific code implementation is as follows：\n@Test @DisplayName(\u0026#34;port boundary test, maximum\u0026#34;) void preflightRequestPortBoundaryTestWhenCorsConfigInvalidShouldReturnForbidden() throws Exception { RequestEntity\u0026lt;?\u0026gt; entity = RequestEntity.options(new URI(\u0026#34;/actuator/env\u0026#34;)) .header(\u0026#34;Origin\u0026#34;, \u0026#34;http://localhost:65535\u0026#34;) .header(\u0026#34;Access-Control-Request-Method\u0026#34;, \u0026#34;GET\u0026#34;) .build(); ResponseEntity\u0026lt;byte[]\u0026gt; exchange = this.testRestTemplate.exchange(entity, byte[].class); assertThat(exchange.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN); } @Test @DisplayName(\u0026#34;port boundary test2, minimum\u0026#34;) void preflightRequestPortBoundaryTest2WhenCorsConfigInvalidShouldReturnForbidden() throws Exception { RequestEntity\u0026lt;?\u0026gt; entity = RequestEntity.options(new URI(\u0026#34;/actuator/env\u0026#34;)) .header(\u0026#34;Origin\u0026#34;, \u0026#34;http://localhost:0\u0026#34;) .header(\u0026#34;Access-Control-Request-Method\u0026#34;, \u0026#34;GET\u0026#34;) .build(); ResponseEntity\u0026lt;byte[]\u0026gt; exchange = this.testRestTemplate.exchange(entity, byte[].class); assertThat(exchange.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN); } @Test @DisplayName(\u0026#34;port boundary test3， out of bound\u0026#34;) void preflightRequestPortBoundaryTest3WhenCorsConfigInvalidShouldReturnForbidden() throws Exception { RequestEntity\u0026lt;?\u0026gt; entity = RequestEntity.options(new URI(\u0026#34;/actuator/env\u0026#34;)) .header(\u0026#34;Origin\u0026#34;, \u0026#34;http://localhost:99999\u0026#34;) .header(\u0026#34;Access-Control-Request-Method\u0026#34;, \u0026#34;GET\u0026#34;) .build(); ResponseEntity\u0026lt;byte[]\u0026gt; exchange = this.testRestTemplate.exchange(entity, byte[].class); assertThat(exchange.getStatusCode()).isEqualTo(HttpStatus.FORBIDDEN); } Run the test case,all test cases pass as expected\n","permalink":"https://examplesite.com/posts/springboottest1/","summary":"Spring Boot is a project under the Spring Framework that simplifies developing, configuring, and deploying Spring-based applications. It promotes convention over configuration by offering pre-configured setups and auto-configuration based on project dependencies, eliminating much of the manual setup and configuration work. Spring Boot applications are stand-alone, containing an embedded web server for easy deployment as a single executable JAR. It offers opinionated defaults to reduce development effort, while still allowing for customization.","title":"Spring Boot Software testing 1, Partitioning and Functioning testing"},{"content":" Prerequisite: You need to familiar with the box model\nUnderstanding the differences between clientHeight/clientLeft, offsetHeight/offsetLeft, and scrollTop/scrollLeft in the context of the Document Object Model (DOM) is crucial for effective web design and development. These properties are used to measure different aspects of elements\u0026rsquo; size and position in relation to their content, padding, border, and scroll position.\nClient clientHeight and clientLeft will give you the height and width of an element including padding. However, client will not calculate the size of the borders and margins. clientHeight/clientLeft are useful for understanding the visible part of an element, particularly for styling purposes or when dealing with scrolling. It\u0026rsquo;s a read-only property, which means you can not modify the params and generate action. Offset Similar with client, offsetHeight, offsetLeft will output the element height and width but including verical and horizontal border, in pixel. offsetHeight/offsetLeft are often used when you need to know the actual size of the element including borders and its position in the layout. Same as client, offsetHeight/offsetLeft is a read only param. Scroll scrollTop property gets or sets the number of pixels that an element\u0026rsquo;s content is scrolled vertically. scrollLeft is similar but for the horizontal axis. Unlike scrollTop, scrollLeft seldom use in current mainstream web pages since most of pages are developed vertically.\nscrollTop/scrollLeft are crucial for controlling and accessing the scroll position within an element, especially in scenarios involving dynamic content loading or scroll-based animations. Typically, scrollTop is a good property to calculate the whole window scroll distance. This distance can be used as a condition for partial attribute changes. For example, we can determine the entry and exit of the header by judging the distance the customer has scroll down. Here is the code:\n\u0026lt;script\u0026gt; const header = document.querySelector(\u0026#39;.header\u0026#39;) const module = document.querySelector(\u0026#39;.module\u0026#39;) window.addEventListener(\u0026#39;scroll\u0026#39;,function (){ const topLength = document.documentElement.scrollTop // if (topLength \u0026gt;= module.offsetTop){ // header.style.top = \u0026#39;0px\u0026#39; // } // else { // header.style.top = \u0026#39;-50px\u0026#39; // } header.style.top = topLength\u0026gt;=module.offsetTop?\u0026#39;0px\u0026#39;:\u0026#39;-50px\u0026#39; }) \u0026lt;/script\u0026gt; Besides, scrollTop is a writable param, which mean you can use it as a jump fumction that quickly scroll to specific position. This will be very helpful when you want to creat an sidebar navigator. Understanding these properties and their differences is key in web development, especially when dealing with dynamic layouts, responsive designs, and interactive content. Each property serves specific purposes and choosing the right one depends on the particular layout or behavior you want to achieve.\n","permalink":"https://examplesite.com/posts/scroll-offset-client/","summary":"Prerequisite: You need to familiar with the box model\nUnderstanding the differences between clientHeight/clientLeft, offsetHeight/offsetLeft, and scrollTop/scrollLeft in the context of the Document Object Model (DOM) is crucial for effective web design and development. These properties are used to measure different aspects of elements\u0026rsquo; size and position in relation to their content, padding, border, and scroll position.\nClient clientHeight and clientLeft will give you the height and width of an element including padding.","title":"Size measurement parameters -- client, offset and scroll"},{"content":"The scroll event in JavaScript is an important event that is triggered whenever an element or the window is scrolled. This event is particularly useful for creating dynamic effects based on the scroll position, such as parallax animations, infinite scrolling, or showing/hiding navigation bars. Here\u0026rsquo;s an overview of the scroll event:\n1. How it Works: The scroll event fires when the document view or an element has been scrolled. It applies to any scrollable element, including the window.\nIt\u0026rsquo;s a non-cancellable event, meaning you cannot use event.preventDefault() to block the scrolling action.\n2. Syntax: // For the entire window window.addEventListener(\u0026#39;scroll\u0026#39;, function() { // Code to execute on scrolling }); // For a specific element document.getElementById(\u0026#39;myElement\u0026#39;).addEventListener(\u0026#39;scroll\u0026#39;, function() { // Code to execute on scrolling within \u0026#39;myElement\u0026#39; }); 3. Use Case Lazy Loading: Triggering the loading of images or content as the user scrolls down. Animation: Implementing scroll-driven animations like revealing elements on scroll. Sticky Elements: Creating sticky headers or other elements that become fixed after a certain scroll point. Tracking Scroll Position: Monitoring the scroll position for analytics or user experience improvements. 4. Event Throttling The scroll event can fire at a high rate, which can lead to performance issues if the event handler does heavy computations or DOM manipulations.\nIt\u0026rsquo;s often advised to throttle the event, either by using a timer (like setTimeout or setInterval) or a library that provides throttling capabilities, to reduce the number of times the event handler is called.\nWhen using scroll event listener, always keep in mind to avoid extensive tasks inside the scroll event handler to prevent jank or sluggish scrolling. Besides, consider debouncing or throttling the event to improve performance and be mindful of accessibility implications, especially when changing layout or visibility of elements on scroll.\nIn summary, the scroll event is a versatile tool in JavaScript for creating interactive and dynamic effects based on the user\u0026rsquo;s scroll behavior. When used effectively and efficiently, it can greatly enhance the user experience on a web page.\n","permalink":"https://examplesite.com/posts/scroll-event/","summary":"The scroll event in JavaScript is an important event that is triggered whenever an element or the window is scrolled. This event is particularly useful for creating dynamic effects based on the scroll position, such as parallax animations, infinite scrolling, or showing/hiding navigation bars. Here\u0026rsquo;s an overview of the scroll event:\n1. How it Works: The scroll event fires when the document view or an element has been scrolled. It applies to any scrollable element, including the window.","title":"Scroll Event"},{"content":"Event Bubbling in JavaScript Event capturing is an event handling mechanism in JavaScript, contrasting with event bubbling. During the capturing phase, an event starts at the root node (usually the document object) and propagates down the DOM tree to the target element, where the event actually took place.\nThe process of event capturing is as follows:\nCapturing Phase: When an event occurs, it is first captured at the topmost node of the DOM tree, then propagates downwards, level by level, until it reaches the target element. During this phase, only those event listeners set to use capturing mode are triggered.\nTarget Phase: When the event reaches the target element, event listeners set for both capturing and bubbling modes are triggered.\nBubbling Phase: After the target phase, if the event is defined as a bubbling event (not all events bubble), it travels back up the DOM tree in the reverse direction, eventually reaching the root node.\nWhen adding event listeners, you can specify whether the listener is triggered during the capturing or bubbling phase. This is controlled by the third parameter of the addEventListener method. If this parameter is true, the listener is triggered during the capturing phase; if false (or omitted), it is triggered during the bubbling phase.\nfor example:\n\u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;father\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;son\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const father = document.querySelector(\u0026#39;.father\u0026#39;) const son = document.querySelector(\u0026#39;.son\u0026#39;) document.addEventListener(\u0026#39;click\u0026#39;,function(){ alert(\u0026#39;grandpa\u0026#39;) }, true) father.addEventListener(\u0026#39;click\u0026#39;,function(){ alert(\u0026#39;father\u0026#39;) }, true) son.addEventListener(\u0026#39;click\u0026#39;,function(){ alert(\u0026#39;son\u0026#39;) }, true) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; Event Bubbling in JavaScript In JavaScript, event bubbling is another event-handling mechanism where an event on a specific element propagates upwards through the DOM tree. This means the event doesn\u0026rsquo;t only trigger on the element it\u0026rsquo;s directly bound to, but also on its parent elements, grandparents, all the way up to the root element (usually the document object).\nThis mechanism allows us to set up an event listener on a parent element to catch and handle events occurring on multiple child elements, instead of setting up individual event listeners on each child element. This approach is known as event delegation.\nFor instance, if you have a list, you can set up a click event listener on the entire list rather than setting it up on each list item individually. When any item in the list is clicked, the event will first trigger on the clicked item and then bubble up the DOM tree, eventually triggering the listener set on the list.\nEvent bubbling can be stopped by calling the stopPropagation() method on the event object. This prevents the event from continuing to bubble up the DOM tree, restricting it to the element where it was initially triggered.\nfor example:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .father { width: 500px; height: 500px; background-color: yellow; } .son { width: 200px; height: 200px; background-color: red; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;father\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;son\u0026#34;\u0026gt;\u0026lt;/div\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const father = document.querySelector(\u0026#39;.father\u0026#39;) const son = document.querySelector(\u0026#39;.son\u0026#39;) document.addEventListener(\u0026#39;click\u0026#39;,function(){ alert(\u0026#39;grandpa\u0026#39;) }) father.addEventListener(\u0026#39;click\u0026#39;,function(){ alert(\u0026#39;father\u0026#39;) }) son.addEventListener(\u0026#39;click\u0026#39;,function(obj){ alert(\u0026#39;son\u0026#39;) obj.stopPropagation() }) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; ","permalink":"https://examplesite.com/posts/event-flow-capture-bubble/","summary":"Event Bubbling in JavaScript Event capturing is an event handling mechanism in JavaScript, contrasting with event bubbling. During the capturing phase, an event starts at the root node (usually the document object) and propagates down the DOM tree to the target element, where the event actually took place.\nThe process of event capturing is as follows:\nCapturing Phase: When an event occurs, it is first captured at the topmost node of the DOM tree, then propagates downwards, level by level, until it reaches the target element.","title":"Event flow , capture, bubble and how to stop bubbling"},{"content":"Javascript timer function can make some code be excueted repeatedly over time.\nSyntax:\n// open setInterval(function,interaval-time) // close let t = setInterval(function,interaval-time) clearInterval(t) t: variable\ninteraval-time unit: ms\nExample:\n\u0026lt;body\u0026gt; \u0026lt;button class=\u0026#34;btn\u0026#34; disabled\u0026gt;aggree(5)\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const btn = document.querySelector(\u0026#39;.btn\u0026#39;) let i = 5 let timer = setInterval(function(){ i-- btn.innerHTML = `aggree(${i})` if (i === 0){ clearInterval(timer) btn.disabled = false btn.innerHTML = \u0026#39;aggree\u0026#39; } },1000) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; ","permalink":"https://examplesite.com/posts/timer/","summary":"Javascript timer function can make some code be excueted repeatedly over time.\nSyntax:\n// open setInterval(function,interaval-time) // close let t = setInterval(function,interaval-time) clearInterval(t) t: variable\ninteraval-time unit: ms\nExample:\n\u0026lt;body\u0026gt; \u0026lt;button class=\u0026#34;btn\u0026#34; disabled\u0026gt;aggree(5)\u0026lt;/button\u0026gt; \u0026lt;script\u0026gt; const btn = document.querySelector(\u0026#39;.btn\u0026#39;) let i = 5 let timer = setInterval(function(){ i-- btn.innerHTML = `aggree(${i})` if (i === 0){ clearInterval(timer) btn.disabled = false btn.innerHTML = \u0026#39;aggree\u0026#39; } },1000) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; ","title":"Timer"},{"content":"ClassList can help reduce the redundancy of .style method and resolve the ClassName overwrite risk.\nSytax:\n// add a class element.classList.add(\u0026#39;className\u0026#39;) // delete a class element.classList.remove(\u0026#39;className\u0026#39;) // switch a class element.classList.toggle(\u0026#39;className\u0026#39;) Example:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 200px; height: 200px; color: #333; } .active { color: red; background-color: pink; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;text\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; //get element const box = document.querySelector(\u0026#39;.box\u0026#39;) //change stylew by adding class box.classList.add(\u0026#39;active\u0026#39;) // delete class box.classList.remove(\u0026#39;active\u0026#39;) //switch class box.classList.toggle(\u0026#39;active\u0026#39;) \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; keep in mind that the running logic of toggle is run the detect if the class existed in the element, if yes, delete, if no, add up\n","permalink":"https://examplesite.com/posts/operate-style/","summary":"ClassList can help reduce the redundancy of .style method and resolve the ClassName overwrite risk.\nSytax:\n// add a class element.classList.add(\u0026#39;className\u0026#39;) // delete a class element.classList.remove(\u0026#39;className\u0026#39;) // switch a class element.classList.toggle(\u0026#39;className\u0026#39;) Example:\n\u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;UTF-8\u0026#34;\u0026gt; \u0026lt;meta name=\u0026#34;viewport\u0026#34; content=\u0026#34;width=device-width, initial-scale=1.0\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Document\u0026lt;/title\u0026gt; \u0026lt;style\u0026gt; .box { width: 200px; height: 200px; color: #333; } .active { color: red; background-color: pink; } \u0026lt;/style\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;text\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; //get element const box = document.","title":"Control CSS using classList"},{"content":"DOM query Slect first match element document.querySelector(\u0026#39;css selector\u0026#39;) Slect all match element document.querySelectorAll(\u0026#39;css selector\u0026#39;) return is fake array which no work with push and pop method\nModification using DOM modify text content \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;content\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const box = document.querySelector(\u0026#39;.box\u0026#39;) box.innerText = \u0026#39;content changed\u0026#39; box.innerHTML = \u0026#39;\u0026lt;strong\u0026gt;content changed\u0026lt;/strong\u0026gt;\u0026#39; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; innerText method will not parse tags, exp: \u0026lt;strong\u0026gt;hello\u0026lt;/strong\u0026gt; will return \u0026lt;strong\u0026gt;hello\u0026lt;/strong\u0026gt; rather hello\n","permalink":"https://examplesite.com/posts/dom/","summary":"DOM query Slect first match element document.querySelector(\u0026#39;css selector\u0026#39;) Slect all match element document.querySelectorAll(\u0026#39;css selector\u0026#39;) return is fake array which no work with push and pop method\nModification using DOM modify text content \u0026lt;body\u0026gt; \u0026lt;div class=\u0026#34;box\u0026#34;\u0026gt;content\u0026lt;/div\u0026gt; \u0026lt;script\u0026gt; const box = document.querySelector(\u0026#39;.box\u0026#39;) box.innerText = \u0026#39;content changed\u0026#39; box.innerHTML = \u0026#39;\u0026lt;strong\u0026gt;content changed\u0026lt;/strong\u0026gt;\u0026#39; \u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt; innerText method will not parse tags, exp: \u0026lt;strong\u0026gt;hello\u0026lt;/strong\u0026gt; will return \u0026lt;strong\u0026gt;hello\u0026lt;/strong\u0026gt; rather hello","title":"DOM -- Document Object Model"},{"content":" Mearge conflict resolution: Edit the confilct file manually and then commit to branch\n","permalink":"https://examplesite.com/posts/git-workflow-conflict/","summary":"Mearge conflict resolution: Edit the confilct file manually and then commit to branch","title":"Git classic workflow and merge conflict solution"},{"content":"Mega CMD is an software that provide similar function of QNAP HBS, but I don\u0026rsquo;t know why they can\u0026rsquo;t just integrated their function into HBS. And it is a command line system, though I\u0026rsquo;m not afraid of command but it truly increase the inconvenience for those who just want to make a backup. Most seriously, the way to enter the cmd window won\u0026rsquo;t show up on their readme.md but only in the introduction of the app store, with an very blurry picture. That\u0026rsquo;s ridiculous. I hope they can make the doc clearer in the future.\n","permalink":"https://examplesite.com/posts/megacmd/","summary":"Mega CMD is an software that provide similar function of QNAP HBS, but I don\u0026rsquo;t know why they can\u0026rsquo;t just integrated their function into HBS. And it is a command line system, though I\u0026rsquo;m not afraid of command but it truly increase the inconvenience for those who just want to make a backup. Most seriously, the way to enter the cmd window won\u0026rsquo;t show up on their readme.md but only in the introduction of the app store, with an very blurry picture.","title":"How to enter QNAP NAS Mega CMD"},{"content":" Prerequisite: Before proceeding, it is essential to have a static public IP. If you do not already have one, kindly reach out to your ISP for assistance. Please note that if you are unfamiliar with QNAP NAS, this article may not cater to your requirements.\nFor several reasons, you cannot connect to many cloud storage server like google drive in China, which make it difficult to fully function the HBS3(Hybrid Backup Sync). To solve those problem, I add a proxy gateway to my family network and make some configuration to make sQure the Transparent proxy working properly. However, this led to troubles with the Dynamic Domain Name System (DDNS) due to the changes in configuration. This issue had persisted for quite some time until I finally discovered the solution to the mystery.\nInitially, I encountered issues with Myqnapcloud DDNS not functioning despite correctly configuring port forwarding or DMZ on my router. However, upon inspecting the DDNS IP address and comparing it with my public IP, I discovered that they did not match. I was surprised to find that the DDNS was erroneously pointing to my proxy IP. After couples of searches, finally I realized that I was not fully familiar with the working principle of DDNS, and the proxy routing function treated the DDNS server data as a flow requiring proxy, causing the issue.\nIn order to solve the above problems,you need to take the following steps:\n1.Filed a ticket with QNAP to obtain a list of their ddns name servers.\n2.Added these servers to your routing rules to ensure a direct connection when the ddns name server tries to trace the correct IP.\n3.Ensured that the port mapping/port forwarding function is enabled and properly configured in both the router and proxy gateway. This needs to be done twice to ensure that the correct ports are open on both sides.\nhttps://auth.api.myqnapcloud.com https://auth.myqnapcloud.io https://edge.api.myqnapcloud.com https://edge.myqnapcloud.io https://core2.api.myqnapcloud.com https://core2.myqnapcloud.io\nThe above list is what I know QNAP use for DDNS, if no, raise a ticket to ask them again.\nYour myqnapcloud may functioning now. Overall, it is not a formidable cases when you know the running theory of DDNS and Tproxy. Myqnapcloud is a good app, it help me save a lot of configuration step, but at the same time, it also makes me omit some underlying logic of DDNS and hinder me to solve the wrong pointing issue.\n","permalink":"https://examplesite.com/posts/qnap_ddns/","summary":"Prerequisite: Before proceeding, it is essential to have a static public IP. If you do not already have one, kindly reach out to your ISP for assistance. Please note that if you are unfamiliar with QNAP NAS, this article may not cater to your requirements.\nFor several reasons, you cannot connect to many cloud storage server like google drive in China, which make it difficult to fully function the HBS3(Hybrid Backup Sync).","title":"How to make QNAP NAS DDNS functional while using Tproxy"},{"content":"Abstract There is no absolute safe disguise, all protocols have risks of detected.\nCommon attack made by middle box Passive analysis (Traffic characteristic, PoC vulnerability) Usually use for plain text protocol or TLS handshake.\nActive analysis Usually use for Shadowsocks, V2Ray, TLS v1.3 (obtian svers\u0026rsquo;s SSL certificate)\nreplay package\nSome obvious charecteristics of proxy traffic. Long connection Most HTTP traffic is short connection.\nbidireaction flow 99% of Web traffic(HTTP) is one-way flow, which is a group of request match a group of response, few website use websocket.\nHigh traffic Lack of reasons to justify large traffic.\nHigh connection numbers Normally a website will only create one websocket connection, hard to explain why there are 20-30 connections existed.\nPoint to point IP to IP, high encryption, high traffic, thus \u0026mdash;- high suspiciousness\nThose charecteristics are always exist in proxy protocols, it will be hard to erase.\nTLS traffic risk analysis ClientHello TLS ClientHello have fingerprint\nIf access website using programs default fingerprint(for example: Go TLS) and match the features above. The risk that will be recongized by proxy will be high.\nIran firewall will reject curl and wget fingerprint request for non-whitelist, Go TLS and browsers fingerprint will be allowed. Recommende to connect by using browser\u0026rsquo;s fingerprint. (Go project uTLS) Note: this repository is disrepair and the chrome fingerprint remain at Chrome 83, it may be a risk. A changable option of the above is here , Chrome 104 fingerprint is currently added.\nServer Name Idication (SNI) Highest risk for free domains, cheap domains will also contain risk.\nTLS connection version TlS v1.3 has the highest risk, all contents after the Server Hello will be all encrypted, middlebox need active detection to obtain server certificate.\nTLS v1.2 will be considered as median risk. All certificates exchange will be in plain text, middle box can verify it through intercept traffic.\nSSL v3/TLS v1.0/TLS v1.1 have the lowest risk , there is few traffic here, in other words, fewer sample. However, using out-dated encryption have risk of being attacked, not recommended.\nTLS server certificate Self-signed certificate have the highest risk. Second are cloudflare certificate and Let\u0026rsquo;s Encrypt because they are free.\nAlmost no people will spent hunders of dollars on certificate.\nReport: New detection method that capable to detect Fake TLS traffic Analysis Both MTPRoto FakeTLS and Shadow TLS(v1/v2) are simulate a TLS handshake with trusted certificate to circumvent whitelist. Both two protocols are nearly perfect, they can be verified as valid client while handshake.\nHow to verify client of MTProto FakeTLS ClientHello package remove ramdom field and make a whole package for hmac, key will be secret, also use the hmac on sevrer to verify client, random have one-time processing, it will fallback to real web server if failed. Indentification method: TLS handshake of MTProto not standardize, firewall can intercept the hostCert package and judge the length. The lenght of hostCert will be ramdon, between 1024-4096 bit. (mtg-faketls)\nShadow TLS v1 won\u0026rsquo;t verify client Identification method: send a request to the sever through curl, curl will failed.\nHow Shadow TLS v2 verify client After client request, sever will return the orgin data as challenge response and use password to hmac. The server can verif the client using same hmac. Due to the return data have randomness and can also achieve one-time verification, middlebox can not react the challenge response if they don\u0026rsquo;t have password, hence, it will be more safer compare with MTproto handshake. New measure to detect client Most protocols security are based on server verify the client, but the client will not verify sever\u0026rsquo;s validity. In other words, one-way authentication Firewall can detect the server reaction by using fake server package. Using reverse dectection to check if the clients are real browser\nMTProto use hmac algorithm in ServerHello and will not affected by this measure.\nHow PoC identify the Shadow TLS v2 protocol desigin Github docs Firewall will intercept a normal TCP connection randomly. After they get TLS ClientHello, they will hijack the request content\u0026rsquo;s SNI field to real SNI server. After the TLS handshake finished, client of Shadow TLS will incert server\u0026rsquo;s challenge response 8 bit before the Application Data.\nAt this moment, because the opposite side is a real real TLS server, handshake with Shadow TLS client will be successful. But afer the hmac sent, server will drop an Alert(Encrypted Application Data) bacause it is not a negotiated TLS encryption. After that, the server will FIN or RST the TCP connection, at this time the ShadowTLS will be identified and can be block by ip precisely.\nProxy procotols will normally use multi connection. Middlebox can precisely identify the client by merely pick one of those connection.\nCurrently recommend proxy protocol Hystertia, TUIC(QUIC) The firewall does not block or interfere with QUIC, so you can use it with confidence. \u0026ldquo;This article is translate from Coia channel ,some emotional expressions have been deleted. This article not represent personal opinion \u0026quot;\n","permalink":"https://examplesite.com/posts/middle_box/","summary":"Abstract There is no absolute safe disguise, all protocols have risks of detected.\nCommon attack made by middle box Passive analysis (Traffic characteristic, PoC vulnerability) Usually use for plain text protocol or TLS handshake.\nActive analysis Usually use for Shadowsocks, V2Ray, TLS v1.3 (obtian svers\u0026rsquo;s SSL certificate)\nreplay package\nSome obvious charecteristics of proxy traffic. Long connection Most HTTP traffic is short connection.\nbidireaction flow 99% of Web traffic(HTTP) is one-way flow, which is a group of request match a group of response, few website use websocket.","title":"How Middleboxs Identify Proxy Traffics"},{"content":"If you use systemctl status nginx to check nginx status you may find a pid error appear on status panel. The words that appear may be :\nCan\u0026#39;t open PID file /run/nginx.pid (yet?) after start: Operation not permitted Or Can\u0026#39;t open PID file /var/run/nginx.pid (yet?) after start: No such file or directory This is becasue the pid file not generate before the nginx booted. The solution is to add following sentence into /usr/lib/systemd/system/nginx.service, it will let nginx wait 0.1s before executing the executable.\nExecStartPost=/bin/sleep 0.1\nAdd this sentence to the [service] part.\nRload and restart the nginx\nsystemctl daemon-reload systemctl restart nginx Problem fixed.\n","permalink":"https://examplesite.com/posts/nginx_error/","summary":"If you use systemctl status nginx to check nginx status you may find a pid error appear on status panel. The words that appear may be :\nCan\u0026#39;t open PID file /run/nginx.pid (yet?) after start: Operation not permitted Or Can\u0026#39;t open PID file /var/run/nginx.pid (yet?) after start: No such file or directory This is becasue the pid file not generate before the nginx booted. The solution is to add following sentence into /usr/lib/systemd/system/nginx.","title":"Nginx pid error fix"}]